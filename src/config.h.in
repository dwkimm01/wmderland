// Copyright (c) 2018-2020 Marco Wang <m.aesophor@gmail.com>
#ifndef WMDERLAND_CONFIG_H_
#define WMDERLAND_CONFIG_H_

extern "C" {
#include <X11/Xlib.h>
}
#include <cerrno>
#include <fstream>
#include <map>
#include <string>
#include <unordered_map>
#include <vector>

#include "action.h"
#include "util.h"

#define GLOG_FOUND @GLOG_FOUND@
#define WIN_MGR_NAME "@PROJECT_NAME@"
#define VERSION "@PROJECT_VERSION@"
#define CONFIG_FILE "~/.config/wmderland/config"
#define COOKIE_FILE "~/.cache/wmderland/cookie"
#define SNAPSHOT_FILE "~/.cache/wmderland/snapshot"

#define UNSPECIFIED_WORKSPACE -1
#define WORKSPACE_COUNT 9

#define MIN_WINDOW_WIDTH 50
#define MIN_WINDOW_HEIGHT 50
#define DEFAULT_FLOATING_WINDOW_WIDTH 800
#define DEFAULT_FLOATING_WINDOW_HEIGHT 600

#define DEFAULT_GAP_WIDTH 15
#define DEFAULT_BORDER_WIDTH 3
#define DEFAULT_FLOAT_MOVE_STEP 10
#define DEFAULT_FLOAT_RESIZE_STEP 10
#define DEFAULT_FOCUSED_COLOR 0xffffffff
#define DEFAULT_UNFOCUSED_COLOR 0xff41485f
#define DEFAULT_FOCUS_FOLLOWS_MOUSE true

#define VARIABLE_PREFIX "$"
#define DEFAULT_EXIT_KEY "Mod4+Shift+Escape"

namespace wmderland {

class Config {
 public:
  Config(Display* dpy, /*Properties* prop,*/ const std::string& filename);
  virtual ~Config() = default;
  void Load();

  int GetSpawnWorkspaceId(Window window) const;
  bool ShouldFloat(Window window) const;
  bool ShouldFullscreen(Window window) const;
  bool ShouldProhibit(Window window) const;
  const std::vector<Action>& GetKeybindActions(unsigned int modifier, KeyCode keycode) const;

  unsigned int gap_width() const;
  unsigned int border_width() const;
  unsigned int min_window_width() const;
  unsigned int min_window_height() const;
  unsigned int float_move_step() const;
  unsigned int float_resize_step() const;
  unsigned long focused_color() const;
  unsigned long unfocused_color() const;
  bool focus_follows_mouse() const;
  const std::map<std::pair<unsigned int, KeyCode>, std::vector<Action>>& keybind_rules() const;
  const std::vector<std::string>& autostart_cmds() const;
  const std::vector<std::string>& autostart_cmds_on_reload() const;

  friend std::ifstream& operator>>(std::ifstream& ifs, Config& config);

 private:
  enum class Keyword {
    SET,
    ASSIGN,
    FLOATING,
    FULLSCREEN,
    PROHIBIT,
    BINDSYM,
    EXEC,
    UNDEFINED,
  };

  static Config::Keyword StrToConfigKeyword(const std::string& s);
  static std::string ExtractWindowIdentifier(const std::string& s);
  std::vector<std::string> GeneratePossibleConfigKeys(Window window) const;
  const std::string& ReplaceSymbols(std::string& s);

  static const std::vector<Action> kEmptyActions_;

  // WM variables
  unsigned int gap_width_;
  unsigned int border_width_;
  unsigned int min_window_width_;
  unsigned int min_window_height_;
  unsigned int float_move_step_;
  unsigned int float_resize_step_;
  unsigned long focused_color_;
  unsigned long unfocused_color_;
  bool focus_follows_mouse_;

  // symtab: for storing user-declared identifiers.
  // spawn_rules_: spawn certain apps in certain workspaces.
  // float_rules_: start certain apps in floating mode.
  // fullscreen_rules_: start certain apps in fullscreen mode.
  // prohibit_rules_: apps that should be prohibit from starting.
  // keybind_rules_: keybind actions.
  // autostart_cmds_: run certain commands when wm starts.
  // autostart_cmds_on_reload_: run certain commands when wm starts and on config reload.
  std::unordered_map<std::string, std::string> symtab_;
  std::unordered_map<std::string, int> spawn_rules_;
  std::unordered_map<std::string, bool> float_rules_;
  std::unordered_map<std::string, bool> fullscreen_rules_;
  std::unordered_map<std::string, bool> prohibit_rules_;
  std::map<std::pair<unsigned int, KeyCode>, std::vector<Action>> keybind_rules_;
  std::vector<std::string> autostart_cmds_;
  std::vector<std::string> autostart_cmds_on_reload_;

  Display* dpy_;
//  Properties* prop_;
  const std::string filename_;
  static const char kCommentSymbol = ';';
};

}  // namespace wmderland

#endif  // WMDERLAND_CONFIG_H_
